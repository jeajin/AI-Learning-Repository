# from simglucose.controller.pid_ctrller import PIDController
# from simglucose.controller.qlearnctrller import QLController
# from simglucose.controller.basal_bolus_ctrller import BBController
from simglucose.controller.dqlearnctrller import DQLController
from simglucose.simulation.user_interface import simulate

# Bcontroller = BBController()
# s = simulate(controller=Bcontroller)

#Qcontroller = PIDController()
#s = simulate(controller=Qcontroller)

# Qcontroller = QLController(actions=3)
# s = simulate(controller=Qcontroller)

# DQcontroller = DQLController(state_size=1, action_size=3, episode=1, previous_time=4, model='c')
# s = simulate(controller=DQcontroller, sim_time=24, animate=True, parallel=False, name='', selection=1, seed=0, start_time=0, cgm_selection=2, pump_selection=2)


# memory = deque(maxlen=3)
# mm = deque(maxlen=1000)
# # 30k = 30,000 = 하루 288 인데 30,000 / 288
# memory.append([1, 2, 3, 4, 5])
# memory.append([1, 2, 3, 4, 5])
# memory.append([1, 2, 3, 4, 5])
# mm.append(mm)
# memory.append([6, 2, 3, 4, 5])
# #print(memory)
# mm.append(mm)
# memory.append([7, 2, 3, 4, 5])
# #print(memory)
# mm.append(mm)
# memory.append([8, 2, 3, 4, 5])
# #print(memory)
# mm.append(mm)
# memory.append([9, 2, 3, 4, 5])
# #print(memory)
# mm.append(mm)
# memory.append([10, 2, 3, 4, 5])
# #print(memory)
# mm.append(mm)
# memory.append([11, 2, 3, 4, 5])
# #print(memory)
# mm.append(mm)
# memory.append([12, 2, 3, 4, 5])
# #print(memory)
# mm.append(mm)
# memory.append([13, 2, 3, 4, 5])
# #print(memory)
# mm.append(mm)
# # print(len(mm))
# # mini_batch = random.sample(mm, 1)
#
#
# print(random.sample(memory, 2))
#
# # print(mini_batch)
# m1 = deque(maxlen=10)
# m2 = deque(maxlen=10)
# for a in range(0,10):
#     m1.append(a)
# for a in range(10,100):
#     m2.append(list(m1))
#
# # print(random.sample(m2, 2))
# from keras.layers import Dense, Conv1D, MaxPooling1D, Dropout
# from keras.optimizers import Adam
# from keras.models import Sequential
# #
# #
# model = Sequential()
#
# model.add(Conv1D(32, kernel_size=3, activation='relu', input_shape=(48,1)))
# model.add(MaxPooling1D(pool_size=2))
# #model.add(Conv1D(32, kernel_size=3, activation='relu'))
# #model.add(MaxPooling1D(pool_size=2))
# model.add(Dense(512, activation='relu',
#                 kernel_initializer='he_uniform'))
# model.add(Dropout(0.2))
# model.add(Dense(3, activation='softmax',
#                 kernel_initializer='he_uniform'))
# model.summary()
# model.compile(loss='mse', optimizer=Adam(lr=0.7))
# #
# import numpy as np
# data = np.array([[171.03457797, 171.01063469, 170.52590357, 168.32822041, 164.97804764,
#  161.0395677  , 157.11198706 ,153.87034136 ,151.9435628  ,151.44802829,
#  151.41051158 ,150.68544235 ,148.8019409  ,146.7225407  ,145.67427285,
#  146.303462   ,148.02231389 ,149.94625576 ,151.13273078 ,150.51367154,
#  147.1265042  ,141.10073821 ,134.88997154 ,131.31550159 ,131.76682062,
#  134.5902758  ,137.41811393 ,137.88412759 ,133.62316225 ,128.03796162,
#  137.45200617 ,142.67777951 ,144.83944246 ,145.05989224 ,144.46140528,
#  144.09284234 ,144.4145952  ,144.63626184 ,143.76071744 ,141.49097354,
#  139.01793081 ,137.80501437 ,138.68541972 ,141.15062954 ,144.34366811,
#  147.14692503 ,147.88964908 ,144.91901327]])
# data2 = np.array([[171.03457797, 171.01063469, 170.52590357, 168.32822041, 164.97804764,
#  161.0395677  , 157.11198706 ,153.87034136 ,151.9435628  ,151.44802829,
#  151.41051158 ,150.68544235 ,148.8019409  ,146.7225407  ,145.67427285,
#  146.303462   ,148.02231389 ,149.94625576 ,151.13273078 ,150.51367154,
#  147.1265042  ,141.10073821 ,134.88997154 ,131.31550159 ,131.76682062,
#  134.5902758  ,137.41811393 ,137.88412759 ,133.62316225 ,128.03796162,
#  137.45200617 ,142.67777951 ,144.83944246 ,145.05989224 ,144.46140528,
#  144.09284234 ,144.4145952  ,144.63626184 ,143.76071744 ,141.49097354,
#  139.01793081 ,137.80501437 ,138.68541972 ,141.15062954 ,144.34366811,
#  147.14692503 ,147.88964908 ,144.91901327],
#                   [171.03457797, 171.01063469, 170.52590357, 168.32822041, 164.97804764,
#  161.0395677  , 157.11198706 ,153.87034136 ,151.9435628  ,151.44802829,
#  151.41051158 ,150.68544235 ,148.8019409  ,146.7225407  ,145.67427285,
#  146.303462   ,148.02231389 ,149.94625576 ,151.13273078 ,150.51367154,
#  147.1265042  ,141.10073821 ,134.88997154 ,131.31550159 ,131.76682062,
#  134.5902758  ,137.41811393 ,137.88412759 ,133.62316225 ,128.03796162,
#  137.45200617 ,142.67777951 ,144.83944246 ,145.05989224 ,144.46140528,
#  144.09284234 ,144.4145952  ,144.63626184 ,143.76071744 ,141.49097354,
#  139.01793081 ,137.80501437 ,138.68541972 ,141.15062954 ,144.34366811,
#  147.14692503 ,147.88964908 ,144.91901327],
#                   [171.03457797, 171.01063469, 170.52590357, 168.32822041, 164.97804764,
#  161.0395677  , 157.11198706 ,153.87034136 ,151.9435628  ,151.44802829,
#  151.41051158 ,150.68544235 ,148.8019409  ,146.7225407  ,145.67427285,
#  146.303462   ,148.02231389 ,149.94625576 ,151.13273078 ,150.51367154,
#  147.1265042  ,141.10073821 ,134.88997154 ,131.31550159 ,131.76682062,
#  134.5902758  ,137.41811393 ,137.88412759 ,133.62316225 ,128.03796162,
#  137.45200617 ,142.67777951 ,144.83944246 ,145.05989224 ,144.46140528,
#  144.09284234 ,144.4145952  ,144.63626184 ,143.76071744 ,141.49097354,
#  139.01793081 ,137.80501437 ,138.68541972 ,141.15062954 ,144.34366811,
#  147.14692503 ,147.88964908 ,144.91901327],
#                   [171.03457797, 171.01063469, 170.52590357, 168.32822041, 164.97804764,
#  161.0395677  , 157.11198706 ,153.87034136 ,151.9435628  ,151.44802829,
#  151.41051158 ,150.68544235 ,148.8019409  ,146.7225407  ,145.67427285,
#  146.303462   ,148.02231389 ,149.94625576 ,151.13273078 ,150.51367154,
#  147.1265042  ,141.10073821 ,134.88997154 ,131.31550159 ,131.76682062,
#  134.5902758  ,137.41811393 ,137.88412759 ,133.62316225 ,128.03796162,
#  137.45200617 ,142.67777951 ,144.83944246 ,145.05989224 ,144.46140528,
#  144.09284234 ,144.4145952  ,144.63626184 ,143.76071744 ,141.49097354,
#  139.01793081 ,137.80501437 ,138.68541972 ,141.15062954 ,144.34366811,
#  147.14692503 ,147.88964908 ,144.91901327],
#                   [171.03457797, 171.01063469, 170.52590357, 168.32822041, 164.97804764,
#                    161.0395677, 157.11198706, 153.87034136, 151.9435628, 151.44802829,
#                    151.41051158, 150.68544235, 148.8019409, 146.7225407, 145.67427285,
#                    146.303462, 148.02231389, 149.94625576, 151.13273078, 150.51367154,
#                    147.1265042, 141.10073821, 134.88997154, 131.31550159, 131.76682062,
#                    134.5902758, 137.41811393, 137.88412759, 133.62316225, 128.03796162,
#                    137.45200617, 142.67777951, 144.83944246, 145.05989224, 144.46140528,
#                    144.09284234, 144.4145952, 144.63626184, 143.76071744, 141.49097354,
#                    139.01793081, 137.80501437, 138.68541972, 141.15062954, 144.34366811,
#                    147.14692503, 147.88964908, 144.91901327]
#                   ])
# print(data.shape)
# print(np.reshape(data, (48, 1, 1)).shape)
# #
# model.predict(np.reshape(data, (1, 48, 1)))